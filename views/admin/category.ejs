<%- include('./partials/admin-head.ejs') %>
<%- include('./partials/breadcrumb.ejs', { pages: [{ label: 'Categorías', link: '/admin/categories' }, { label: 'Edición' } ] }) %>

<style>
  .category-editor-grid {
    display: grid;
    grid-gap: 32px;
    grid-template-columns: 2fr 1fr;
  }

  .first-col {
    grid-column-start: 1;
  }
  
  .span-2-col {
    grid-column-end: span 2;
  }

  .pell-content p:first-child {
    margin-top: 0;
  }

  @media screen and (max-width: 992px) {
    .category-editor-grid {
      grid-template-columns: 1fr;
      grid-gap: 16px;
    }

    .first-col {
      grid-column-start: unset;
    }
    
    .span-2-col {
      grid-column-end: unset;
    }
  }
</style>

<div id="vue-category-editor" v-cloak>
  <div style="display: flex;">
    <h1 style="flex-grow: 1; margin-bottom: 40px;">Categoría</h1>
    <div>
      <tiendu-secondary-button :disabled="!categoryId" :link="`/categorias/${originalHandle}`" style="margin-right: 8px;">
        <div>
          <span class="hide-mobile">
            Visualizar
          </span>
          <i class="show-mobile bi bi-box-arrow-up-right"></i>
        </div>
      </tiendu-secondary-button>
      <tiendu-secondary-button :disabled="!categoryId" @click="remove()">
        <div>
          <span class="hide-mobile">
            Borrar
          </span>
          <i class="show-mobile bi bi-trash-fill"></i>
        </div>
      </tiendu-secondary-button>
    </div>
  </div>
  <div class="category-editor-grid">
    <tiendu-input error="true" label="Título" id="title" v-model="title" :error="titleError" help="El título principal, que se muestra arriba de la página."></tiendu-input> 
    <tiendu-input :label="handleRoute" @input="handleChanged()" v-model="handle" :error="handleError" help="Es como se verá la dirección de la página en la barra superior del navegador. Debe ser único para cada página (no se puede repetir)."></tiendu-input>
    <div class="first-col span-2-col">
      <tiendu-textarea ref="textarea" @input="description = $event"></tiendu-textarea>
    </div>
    <image-picker v-model="coverImage" :just-one="true" class="first-col span-2-col">Imágen de portada</image-picker>
    <div class="first-col span-2-col">
      <h2>Productos</h2>
      <static-selectable-table :items="allProducts" :cols="colProds"></static-table>
    </div>
    <div class="first-col span-2-col" style="display: flex;">
      <input type="checkbox" id="listed" v-model="listed" style="margin-right: 8px"><label for="listed">Listada</label>
      <input type="checkbox" id="featured" v-model="featured" style="margin-right: 8px; margin-left: 24px;"><label for="featured">Destacada</label>
    </div>
    <div v-if="errorMessage" class="error-message first-col span-2-col">
      <i class="bi bi-exclamation-circle"></i> {{ errorMessage }}
    </div>
    <div class="first-col span-2-col">
      <tiendu-button normal-text="Guardar categoría" @click="save()"></tiendu-button>
    </div>
  </div>
</div>

<script type="module">
  import tienduSecondaryButton from '/scripts/tiendu-secondary-button.vue.js'
  import tienduTextarea from '/scripts/tiendu-textarea.vue.js'
  import tienduInput from '/scripts/tiendu-input.vue.js'
  import staticSelectableTable from '/scripts/tiendu-static-selectable-table.vue.js'
  import tienduButton from '/scripts/tiendu-button.vue.js'
  import imagePicker from '/scripts/tiendu-image-picker.vue.js'


  axios.defaults.baseURL = `${window.location.protocol}//${window.location.host}/api/`
  const categoryId = (window.location.pathname.split('/')).pop()

  const vueApp = new Vue({
    el: '#vue-category-editor',
    data() {
      return {
        categoryId: undefined,
        allProducts: [],
        coverImage: [],
        colProds: [
          { 
            label: 'Título',
            val: 'title',
            span: 2,
            html: true,
            format: (title, product) => (product.published? '<i class="bi bi-circle-fill published"></i>' : '<i class="bi bi-circle-fill not published"></i>') + title?.replace( /(<([^>]+)>)/ig, '')
          },
          { label: 'Precio', format: price => '$' + price, val: 'price' },
          { label: 'Stock', html: true, val: 'stock' }
        ],
        errorMessage: '',
        title: '',
        titleError: '',
        handle: '',
        originalHandle: '',
        description: '',
        products: [],
        handleError: '',
        handleModified: false,
        listed: true,
        featured: false,
        loading: false
      }
    },
    components: {
      tienduButton,
      tienduSecondaryButton,
      tienduTextarea,
      tienduInput,
      imagePicker,
      staticSelectableTable
    },
    computed: {
      handleRoute() {
        return window.location.host + '/categorias/'
      }
    },
    watch: {
      title() {
        this.autocompleteHandle()
      }
    },
    methods: {
      async getAllProducts (includedIds) {
        const response = await axios.get(`products`, { params: { all: true } })
          this.allProducts = response.data.products?.map(product => {
            product.included = includedIds.includes(product.id)
            return product
          })
          this.allProducts.sort((prod1, prod2) => (prod1.included === prod2.included)? 0 : prod1.included? -1 : 1)
      },
      handleChanged() {
        this.handleModified = this.handle.length > 0
      },
      autocompleteHandle() {
        if (this.title) {
          if (!this.handleModified) {
            this.handle = this.title
              .normalize("NFD")
              .replace('ñ', 'n')
              .replace(/[^\w\s]/g, "")
              .replaceAll(' ', '-')
              .toLowerCase()
          }
        }
      },
      async save () {
        this.handleError = ''
        this.titleError = ''
        this.errorMessage = ''

        try {
          const response = await (this.categoryId? axios.patch : axios.post)(this.categoryId? `categories/${this.categoryId}` : 'categories', {
            title: this.title,
            handle: this.handle,
            products: this.allProducts.filter(prod => prod.included).map(prod => prod.id),
            description: this.description,
            image: this.coverImage.find(Boolean)?.id || null, 
            listed: this.listed,
            featured: this.featured
          })
          
          window.location.href = '/admin/categories'
        } catch (error) {
          if (error.response?.data?.fields) {
            this.errorMessage = 'Se detectó algun error. Quedaron marcados arriba en rojo.' 
            const errorFields = error.response.data.fields
            for (const errorField of errorFields) {
              if ((errorField.name + 'Error') in this)
              this[errorField.name + 'Error'] = errorField.message
            }
          } else {
            this.errorMessage = error.response?.data?.message || 'Ocurrió un error en el servidor' 
          }
        }
      },
      async remove () {
        try {
          const response = await axios.delete(`categories/${this.categoryId}`)
          window.location.href = '/admin/categories'
        } catch (error) {
          alert('Ocurrió un error')  
          console.error(error)
        }
      }
    },
    async created () {
      try {
        const categoryId = (window.location.pathname.split('/')).pop()

        if (categoryId !== 'new') {
          this.categoryId = categoryId
          const response = await axios.get(`categories/${categoryId}`)
          
          if (response.status === 200 && response.data.success) {
            const category = response.data.category
            this.title = category.title
            this.products = category.products
            this.handle = category.handle
            this.description = category.description
            this.$refs.textarea.setUp(this.description)
            if (category.image) this.coverImage = [ category.image ]
            this.originalHandle = category.handle
            this.handleModified = category.handle.length > 0 
            this.listed = category.listed,
            this.featured =  category.featured

          } else {
            this.error = true
          }

          const includedIds = this.products.map(product => product.id)
          await this.getAllProducts(includedIds)
        } else {
          await this.getAllProducts([])
        }
      } catch (error) {
        this.error = true
        console.error(error)
      }
    }
  })

</script>

<%- include('./partials/admin-tail.ejs') %>