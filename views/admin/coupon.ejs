<%- include('./partials/admin-head.ejs') %>
<%- include('./partials/breadcrumb.ejs', { pages: [{ label: 'Marketing', link: '/admin/marketing' }, { label: 'Edición' } ] }) %>

<style>
  .coupon-editor-grid {
    display: grid;
    grid-gap: 32px;
    grid-template-columns: 1fr 1fr;
    align-items: start;
  }

  .first-col {
    grid-column-start: 1;
  }
  
  .span-2-col {
    grid-column-end: span 2;
  }

  h2 {
    padding-top: 24px;
  }

  .extra-detail {
    font-size: smaller;
    margin-top: 8px;
    color: darkgray;
  }

  .extra-detail a {
    text-decoration: underline;
  }

  @media screen and (max-width: 992px) {
    .coupon-editor-grid {
      grid-template-columns: 1fr;
      grid-gap: 16px;
    }

    .first-col {
      grid-column-start: unset;
    }
    
    .span-2-col {
      grid-column-end: unset;
    }
  }
</style>

<div id="vue-coupon-editor" v-cloak>
  <div style="display: flex;">
    <h1 style="margin-bottom: 40px; flex-grow: 1;">Cupón</h1>
    <div>
      <tiendu-secondary-button :disabled="!couponId" @click="remove()">
        <div>
          <span class="hide-mobile">
            Borrar
          </span>
          <i class="show-mobile bi bi-trash-fill"></i>
        </div>
      </tiendu-secondary-button>
    </div>
  </div>
  <div class="coupon-editor-grid">
    <tiendu-input label="Descripción" id="description" v-model="description" help="Corta descripción del descuento. Si no es vacía se le mostrará al cliente al aplicarlo. Este campo es opcional"></tiendu-input> 
    <div>
      <tiendu-input label="Código" v-model="code" @blur="onBlurCode()" :error="codeError" help="El código del cupón que el cliente deberá ingresar para obtener el descuento"></tiendu-input>
      <div class="extra-detail">Link de descuento: <a :href="'/cupon/' + code">{{ applyCodeUrl }}</a></div>
    </div>
    <tiendu-input :label="discountLabel" type="number" step="1" :error="discountError" :post-label="discountPostLabel" id="percentage" v-model="discount" help="El descuento del cupón, que puede ser un porcentaje sobre el monto total de la órden (incluido el envío) o un monto fijo"></tiendu-input>
    <div style="align-self: center; align-items: center; display: flex;">
      <div>
        <input type="radio" v-model="discountType" value="percentage" id="percentage-type"><label for="percentage-type">Porcentaje</label>
      </div>
      <div>
        <input style="margin-left: 16px;" type="radio" v-model="discountType" value="amount" id="amount-type"><label for="amount-type">Monto fijo</label>
      </div>
    </div>
  </div>
  <h2>Restricciones</h2>
  <div class="coupon-editor-grid">
    <div>
      <tiendu-input label="# Usos máximo" type="number" step="1" :error="maxUsesError" id="maxUses" v-model="maxUses" help="La cantidad máxima que se puede usar este cupón. Este campo es opcional"></tiendu-input> 
      <div class="extra-detail">Cantidad de veces ya usado: {{ timesUsed }}</div>
    </div>
    <tiendu-input label="Order mínima $" type="number" step="1" :error="minSpendError" id="minSpend" v-model="minSpend" help="La orden deberá se mayor a este monto para que se puede aplicar. Este campo es opcional"></tiendu-input> 
    <div class="first-col span-2-col" style="display: flex;">
      <input type="checkbox" id="active" v-model="active" style="margin-right: 8px"><label for="active">Activo</label>
    </div>
    <div v-if="errorMessage" class="error-message first-col span-2-col">
      <i class="bi bi-exclamation-circle"></i> {{ errorMessage }}
    </div>
    <div class="first-col span-2-col">
      <tiendu-button normal-text="Guardar cupón" @click="save()"></tiendu-button>
    </div>
  </div>
</div>

<script type="module">
  import tienduButton from '/statics/scripts/tiendu-button.vue.js'
  import tienduSecondaryButton from '/statics/scripts/tiendu-secondary-button.vue.js'
  import tienduInput from '/statics/scripts/tiendu-input.vue.js'

  axios.defaults.baseURL = `${window.location.protocol}//${window.location.host}/api/`
  const couponId = (window.location.pathname.split('/')).pop()

  new Vue({
    el: '#vue-coupon-editor',
    data() {
      return {
        couponId: undefined,
        errorMessage: '',
        code: '',
        codeError: '',
        description: undefined,
        timesUsed: 0,
        active: true,

        // discount
        discountType: 'percentage',
        discount: undefined,
        discountError: '',

        // conditions
        maxUses: undefined,
        maxUsesError: '',
        minSpend: undefined,
        minSpendError: '',

        applyCodeUrl: ''
      }
    },
    computed: {
      discountLabel() {
        return 'Descuento' + (this.discountType === 'percentage' ? '' : ' $') 
      },
      discountPostLabel () {
        return this.discountType === 'percentage' ? '%' : ''
      },
    },
    components: {
      tienduButton,
      tienduSecondaryButton,
      tienduInput
    },
    methods: {
      onBlurCode() {
        this.code = this.code.replace(' ', '-').toUpperCase().replace(/[^-0-9A-Z]/g, '');
        this.applyCodeUrl = window.location.host + '/cupon/' + this.code
      },
      generateRandomCode(length) {
        const result = []
        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        const charactersLength = characters.length
        for (let i = 0; i < length; i++) {
          result.push(characters.charAt(Math.floor(Math.random() * charactersLength)))
        }
        return result.join('')
      },
      async save () {
        try {
          this.errorMessage = ''
          this.codeError = ''
          this.discountError = ''
          this.maxUsesError = ''
          this.minSpendError= ''

          const response = await (this.couponId? axios.patch : axios.post)(this.couponId? `coupons/${this.couponId}` : 'coupons', {
            description: this.description || undefined,
            code: this.code,
            active: this.active,
            percentage: this.discountType === 'percentage' && this.discount ?  parseFloat(this.discount) : undefined,
            amount: this.discountType === 'amount' && this.discount ? parseFloat(this.discount) : undefined,
            minSpend: this.minSpend?  parseFloat(this.minSpend) : undefined,
            maxUses: this.maxUses?  parseInt(this.maxUses) : undefined
          })
          
          window.location.href = '/admin/marketing'
        } catch (error) {
          console.error(error)
          if (error.response?.data?.fields) {
            this.errorMessage = 'Se detectó algun error. Quedaron marcados arriba en rojo.' 
            const errorFields = error.response.data.fields
            for (const errorField of errorFields) {
              if ((errorField.name + 'Error') in this)
              this[errorField.name + 'Error'] = errorField.message
            }
          } else {
            this.errorMessage = error.response?.data?.message || 'Ocurrió un error en el servidor' 
          }
        }
      },
      async remove () {
        try {
          const response = await axios.delete(`coupons/${this.couponId}`)
          window.location.href = '/admin/marketing'
        } catch (error) {
          alert('Ocurrió un error al borrar el cupón')  
          console.error(error)
        }
      }
    },
    async created () {
      try {
        const couponId = (window.location.pathname.split('/')).pop()

         if (couponId !== 'new') {
          this.couponId = couponId
          const response = await axios.get(`coupons/${couponId}`)
          
          if (response.status === 200 && response.data.success) {
            const coupon = response.data.coupon
            this.code = coupon.code
            this.description = coupon.description
            this.discountType = coupon.percentage ? 'percentage' : 'amount'
            this.discount = coupon.percentage || coupon.amount
            this.minSpend = coupon.minSpend
            this.maxUses = coupon.maxUses
            this.timesUsed = coupon.timesUsed
            this.active = coupon.active || false
          } else {
            this.error = true
          }
        } else {
          this.code = this.generateRandomCode(6)
        }
        this.applyCodeUrl = window.location.host + '/cupon/' + this.code
      } catch (error) {
        this.error = true
        console.error(error)
      }
    }
  })

</script>

<%- include('./partials/admin-tail.ejs') %>