<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui-touch-punch/0.2.3/jquery.ui.touch-punch.min.js"></script>

<style>   
  #galleyPopup {
    position: fixed;
    margin: 20px;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    display: none;
    background-color: white;
    overflow-y: auto;
  }

  .image-preview {
    display: inline-block;
    width: 100px;
    height: 100px;
    background-size: cover;
    background-position: center;
    border-radius: 4px;
    margin-right: 8px;
  }

  .imagesGallery {
    border-left: 1px solid lightgray;
    border-top: 1px solid lightgray;
  }

  .image {
    position: relative;
    width: 100%;
    padding-bottom: 100%;
    background-size: cover;
    background-position: center;
    border-right: 1px solid lightgray;
    border-bottom: 1px solid lightgray;
  }

  .imagesGallery .image button.edit {
    display: none;
    position: absolute;
    bottom: 20px;
    left: 20px;
  }

  .imagesGallery .image .checked {
    display: none;
    position: absolute;
    top: 4px;
    right: 4px;
    background-color: #5f9061;
    width: 30px;
    height: 30px;
    border-radius: 50%;
  }

  .imagesGallery.editMode .image button.edit,
  .imagesGallery .image.selected .checked {
    display: block;
  }

</style>

<section>
  <div id="galleyPopup">
    <div style="padding: 12px;">
      <div style="display: flex; flex-direction: column;">
        <header>
          <div style="display: flex; align-items: center;">
            <h2 style="flex-grow: 1;"><button type="button" onclick="closeGallery()">X</button>  Image Gallery</h2>
            <input type="checkbox" onchange="toggleEditMode(event)" id="edit"><label for="edit">Delete mode</label>
            <input type="file" name="image" id="imageUpload" style="display: none;" onchange="uploadImage(event)"/>
          </div>
        </header>
        <div class="imagesGallery row" style="flex-grow: 1; margin-left: 0; margin-right: 0;">
          <div class="col-lg-2 col-md-3 col-4 uploadNew" style="padding-left: 0; padding-right: 0;">
            <div class="image" onclick="$('#imageUpload').click()">
              <div style="position: absolute; top: 0; bottom: 0; right: 0; left: 0; display: flex; align-items: center; justify-content: center;">
                Click to upload a new image
              </div>
            </div>
          </div>
        </div>
        <footer>
          <button class="primary" type="button" onclick="returnSelection()">Select</button>
        </footer>
      </div>
    </div>
  </div>
  <div class="selectedImages" id="sortable"></div>
  <button class="secondary" onclick="loadGallery()"><%= locals.buttonText || 'Pick images' %></button>
</section>

<script>
  function returnSelection() {
    // Convert the index to a list and returns only the images that are selected
    selectedImages(Object.values(imageIndex).filter(imageIndexRecord => imageIndexRecord.selected).map(imageIndexRecord => imageIndexRecord.image))
  }

  function appendImage(image, selected) {
    const newElem = $(`
      <div class="col-lg-2 col-md-3 col-4" style="padding-left: 0; padding-right: 0;">
        <div 
          data-image-id="${image.id}"
          class="image ${selected? 'selected' : ''}" 
          onclick="toggleImageSelection(event)"
          style="background-image: url('${image.thumbSrc}');"
        >
          <div class="checked"></div>
        </div>
      </div>`).insertAfter('.imagesGallery .uploadNew')
      return newElem
  }
  
  function load(preselectedProdutcIds) {
    fetch('/gallery', {
      method: 'GET'
    })
      .then((response) => {
        return response.json()
      })
      .then(body => {
        if (body.success) {
          body.images.forEach(image => {
            const isSelected = preselectedProdutcIds.includes(image.id)
            imageIndex[image.id] = {
              selected: isSelected,
              image
            }
            appendImage(image, isSelected)
          })
        } else {
          if (body.error) {
            alert(body.message || 'There was an error uploading the image')
            console.log('There was an error')
          }
        }
      })
      .catch(function(error) {
        alert('Ups! There was an error uploading the image')
        console.log(error)
      })
  }

  function toggleImageSelection(event) {
    if (!editMode) {
      if (justOne) clearAllSelection()
      const imageElem = event.target || event // It can ge the element directly
      const imageId = $(imageElem).data('image-id')
      if (!imageIndex[imageId].selected) {
        imageIndex[imageId].selected = true
        $(imageElem).addClass('selected')
      } else {
        imageIndex[imageId].selected = false
        $(imageElem).removeClass('selected')
      }
    } else {
      // TODO: take me to image edition panel
      deleteImage(event)
    }
  }

  function toggleEditMode(event) {
    editMode = $(event.target).prop('checked')
    if (editMode) {
      $('.imagesGallery').addClass('editMode')
    } else {
      $('.imagesGallery').removeClass('editMode')
    }
  }

  function editImage(event) {
    alert('Not yet implemented!')
  }

  function deleteImage(event) {
    const imageId = $(event.target).data('image-id')
    fetch(`/gallery/${imageId}?_csrf=<%= csrfToken %>`, {
      method: 'DELETE',
      credentials: 'same-origin'
    })
    .then((response) => {
      return response.json()
    })
    .then(body => {
      $(event.target).parent().remove()
      delete imageIndex[imageId]
      removeImageIfSelected(imageId)
    })
    .catch(function(error) {
      alert('Ups! There was an error deleting the image')
      console.log(error)
    })
  }

  function uploadImage(event) {
    const fileInput = event.target;
    const formData = new FormData();
    formData.append('image', fileInput.files[0]);
    fetch('/gallery?_csrf=<%= csrfToken %>', {
      method: 'POST',
      body: formData
    })
      .then((response) => {
        return response.json()
      })
      .then(body => {
        if (body.success) {
          let image = body.image
          const addedImage = appendImage(image, true)
          imageIndex[image.id] = {
            selected: false,
            image
          }
          if (justOne) clearAllSelection()
          toggleImageSelection(addedImage)
        } else {
          if (body.error) {
            alert(body.message || 'There was an error uploading the image')
            console.log('There was an error')
          }
        }
      })
      .catch(function(error) {
        alert('Ups! There was an error uploading the image')
        console.log(error)
      })
  }

  function closeGallery() {
    $('#galleyPopup').hide();
  }

  function removeImageIfSelected(imageId) {
  $(`.selectedImages .image-preview[data-image-id='${imageId}']`).remove()
  }

  function selectedImages(images) {
    closeGallery()
    console.log(images)
    $('.selectedImages').empty()
    images.forEach(image => {
      $(`<div class="image-preview" data-image-id="${image.id}" style="background-image: url('${image.src}')">
          <input type="hidden" name="images" value="${image.id}">
        </div>`).appendTo('.selectedImages')
    })
    $( "#sortable" ).sortable();
  }

  function loadGallery() {
    if (!galleryLoaded) {
      load(initialImages.map(image => image.id))
      galleryLoaded = true
    }
    $('#galleyPopup').show()
  }

  function remove() {
    alert('Clicked!')
  }

  function readURL(input) {
    $('.previews').empty()
    if (input.files) {
      for (var fileIter of input.files)
        (function(file) {
          var reader = new FileReader();
          reader.onload = function (e) {
          var img = $('<img />', {
          src: e.target.result, 
          width: 180
          }).click(remove)
            .appendTo($('.previews'));
          };

          reader.readAsDataURL(fileIter);
        })(fileIter)
    }
  }

  function clearAllSelection () {
    $('#galleyPopup .image').removeClass('selected')
    Object.keys(imageIndex).forEach(key => {
      imageIndex[key].selected = false  
    })
  }

  const urlParams = new URLSearchParams(window.location.search)
  preselectedProdutcIds = urlParams.get('selected')?.split(',') || []

  var editMode = false

  const imageIndex = {}

  // Image gallery
  let galleryLoaded = false
  const initialImages = <%- JSON.stringify(locals.initial || []) %>;
  const justOne = <%= locals.justOne || false %>;

  $(() => {
    selectedImages(initialImages)
  })
</script>